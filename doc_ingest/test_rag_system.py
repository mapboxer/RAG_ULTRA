#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞, —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞, –∫–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä–∞ –∏ –≥—Ä–∞—Ñ–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

import time
import sys
import traceback
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

try:
    from retrieval.searcher import SemanticSearcher
    from retrieval.universal_searcher import UniversalSearcher, UniversalSearchConfig, Weights, Gating
    from retrieval.reranker import HierarchicalReranker, RerankerConfig
    from retrieval.context_builder import HierarchicalContextBuilder, ContextConfig
    from graph_builder import HierarchicalGraphBuilder
    print("‚úì –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


class RAGSystemTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.base_searcher = None
        self.reranker = None
        self.universal_searcher = None
        self.context_builder = None
        self.graph_builder = None
        self.test_results = {}

    def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("="*60)

        try:
            # 1. –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫
            print("1.1 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞...")
            start_time = time.time()
            self.base_searcher = SemanticSearcher()
            init_time = time.time() - start_time
            print(f"   ‚úì –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {init_time:.2f}—Å")

            # 2. –†–µ—Ä–∞–Ω–∫–µ—Ä
            print("1.2 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞...")
            reranker_config = RerankerConfig(
                kind="hybrid",
                model_path="models/reranker_ru",
                batch_size=8,
                enable_cache=True,
                cache_size=1000,
                adaptive_batching=True,
                hierarchy_aware=True
            )

            start_time = time.time()
            self.reranker = HierarchicalReranker(
                reranker_config,
                embed_encode_fn=lambda t: self.base_searcher.model.encode(
                    t, convert_to_numpy=True, normalize_embeddings=True
                ),
                tokenizer=self.base_searcher.tokenizer
            )
            init_time = time.time() - start_time
            print(f"   ‚úì –†–µ—Ä–∞–Ω–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time:.2f}—Å")

            # 3. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫
            print("1.3 –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞...")
            search_config = UniversalSearchConfig(
                semantic_top_k=100,
                top_k_docs=5,
                max_chunks_per_doc=4,
                enable_cache=True,
                cache_size=500
            )

            start_time = time.time()
            self.universal_searcher = UniversalSearcher(
                base_searcher=self.base_searcher,
                cfg=search_config,
                final_reranker=self.reranker
            )
            init_time = time.time() - start_time
            print(f"   ‚úì –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∑–∞ {init_time:.2f}—Å")

            # 4. –ö–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä
            print("1.4 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä–∞...")
            ctx_config = ContextConfig(
                token_budget=2000,
                per_doc_max_chunks=3,
                preserve_hierarchy=True,
                group_by_sections=True
            )

            start_time = time.time()
            self.context_builder = HierarchicalContextBuilder(
                ctx_config,
                tokenizer=self.base_searcher.tokenizer
            )
            init_time = time.time() - start_time
            print(f"   ‚úì –ö–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time:.2f}—Å")

            # 5. –ì—Ä–∞—Ñ–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            print("1.5 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
            start_time = time.time()
            self.graph_builder = HierarchicalGraphBuilder()
            init_time = time.time() - start_time
            print(
                f"   ‚úì –ì—Ä–∞—Ñ–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time:.2f}—Å")

            self.test_results['initialization'] = True
            print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            traceback.print_exc()
            self.test_results['initialization'] = False
            return False

        return True

    def test_basic_search(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 2: –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫")
        print("="*60)

        if not self.base_searcher:
            print("‚ùå –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        test_queries = [
            "—É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ä—É–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º",
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ—Å—Ç–∞–≤–∫–µ",
            "–æ–±—â–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏",
            "–ø–æ—Ä—è–¥–æ–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
        ]

        for i, query in enumerate(test_queries, 1):
            print(f"\n2.{i} –ü–æ–∏—Å–∫: '{query[:50]}...'")

            try:
                start_time = time.time()
                results = self.base_searcher.search_raw(query, top_k=5)
                search_time = time.time() - start_time

                print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.3f}—Å")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results.results)}")
                print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {results.total_candidates}")

                if results.results:
                    top_result = results.results[0]
                    print(
                        f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {top_result.category} | {top_result.doc_path}")
                    print(f"   –õ—É—á—à–∏–π —Å–∫–æ—Ä: {top_result.best_score:.3f}")

                self.test_results[f'basic_search_{i}'] = True

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                self.test_results[f'basic_search_{i}'] = False

        return True

    def test_universal_search(self):
        """–¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 3: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
        print("="*60)

        if not self.universal_searcher:
            print("‚ùå –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        test_query = "—É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ä—É–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"
        print(f"3.1 –ü–æ–∏—Å–∫: '{test_query[:50]}...'")

        try:
            # –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫
            start_time = time.time()
            results1 = self.universal_searcher.search(test_query)
            search_time1 = time.time() - start_time

            print(f"   –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫: {search_time1:.3f}—Å")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results1.results)}")

            # –í—Ç–æ—Ä–æ–π –ø–æ–∏—Å–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à—É)
            start_time = time.time()
            results2 = self.universal_searcher.search(test_query)
            search_time2 = time.time() - start_time

            print(f"   –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: {search_time2:.3f}—Å")
            print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {search_time1/search_time2:.1f}x")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
            cache_stats = self.universal_searcher.get_cache_stats()
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {cache_stats}")

            self.test_results['universal_search'] = True

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            traceback.print_exc()
            self.test_results['universal_search'] = False
            return False

        return True

    def test_reranker(self):
        """–¢–µ—Å—Ç —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 4: –†–µ—Ä–∞–Ω–∫–µ—Ä")
        print("="*60)

        if not self.reranker or not self.base_searcher:
            print("‚ùå –†–µ—Ä–∞–Ω–∫–µ—Ä –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False

        test_query = "—É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ä—É–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"
        print(f"4.1 –¢–µ—Å—Ç —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{test_query[:50]}...'")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            base_results = self.base_searcher.search_raw(test_query, top_k=10)

            if not base_results.results:
                print("   ‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞")
                return False

            print(f"   –ë–∞–∑–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(base_results.results)}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ä–∞–Ω–∫–µ—Ä
            start_time = time.time()
            reranked = self.reranker.rerank(
                test_query,
                base_results,
                top_k_docs=5,
                max_chunks_per_doc=3
            )
            rerank_time = time.time() - start_time

            print(f"   –í—Ä–µ–º—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞: {rerank_time:.3f}—Å")
            print(f"   –†–µ—Ä–∞–Ω–∫–Ω—É—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(reranked)}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, doc in enumerate(reranked[:3], 1):
                print(f"   {i}. {doc.category} | {doc.doc_path}")
                print(f"      –°–∫–æ—Ä: {doc.best_score:.3f}")
                print(f"      –ò–µ—Ä–∞—Ä—Ö–∏—è: {doc.hierarchy_score:.3f}")
                print(f"      –°–≤—è–∑–Ω–æ—Å—Ç—å: {doc.structural_coherence:.3f}")
                print(f"      –•–∏—Ç–æ–≤: {len(doc.hits)}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞
            cache_stats = self.reranker.get_cache_stats()
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞: {cache_stats}")

            self.test_results['reranker'] = True

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞: {e}")
            traceback.print_exc()
            self.test_results['reranker'] = False
            return False

        return True

    def test_context_builder(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä–∞"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 5: –ö–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä")
        print("="*60)

        if not self.context_builder or not self.reranker:
            print("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä –∏–ª–∏ —Ä–µ—Ä–∞–Ω–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False

        test_query = "—É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ä—É–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"
        print(f"5.1 –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{test_query[:50]}...'")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ä–∞–Ω–∫–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            base_results = self.base_searcher.search_raw(test_query, top_k=8)
            reranked = self.reranker.rerank(
                test_query, base_results, top_k_docs=4, max_chunks_per_doc=3)

            if not reranked:
                print("   ‚ùå –ù–µ—Ç —Ä–µ—Ä–∞–Ω–∫–Ω—É—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                return False

            # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            start_time = time.time()
            context_pack = self.context_builder.build(reranked)
            build_time = time.time() - start_time

            print(f"   –í—Ä–µ–º—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {build_time:.3f}—Å")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(context_pack.items)}")
            print(f"   –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(context_pack.prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç: {len(context_pack.citations)}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality_metrics = self.context_builder.get_quality_metrics(
                context_pack)
            print(f"   –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
            for key, value in quality_metrics.items():
                print(f"     {key}: {value}")

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {context_pack.hierarchy_summary}")

            # –ü–æ–∫—Ä—ã—Ç–∏–µ
            print(
                f"   –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {context_pack.coverage_stats.get('category_coverage', 0)}")
            print(
                f"   –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤: {context_pack.coverage_stats.get('section_coverage', 0)}")

            self.test_results['context_builder'] = True

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä–∞: {e}")
            traceback.print_exc()
            self.test_results['context_builder'] = False
            return False

        return True

    def test_graph_analyzer(self):
        """–¢–µ—Å—Ç –≥—Ä–∞—Ñ–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 6: –ì—Ä–∞—Ñ–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
        print("="*60)

        if not self.graph_builder:
            print("‚ùå –ì—Ä–∞—Ñ–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        print("6.1 –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            test_query = "—É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ä—É–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"
            base_results = self.base_searcher.search_raw(test_query, top_k=5)

            if not base_results.results:
                print("   ‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return False

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            section_analysis = {}
            for doc in base_results.results:
                if doc.hits:
                    headings = []
                    for hit in doc.hits:
                        if hit.heading_path:
                            headings.extend(hit.heading_path)

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
                    levels = {}
                    for heading in headings:
                        level = heading.count('.') + 1
                        if level not in levels:
                            levels[level] = []
                        levels[level].append(heading)

                    section_analysis[doc.doc_path] = {
                        'total_headings': len(headings),
                        'levels': levels,
                        'max_level': max(levels.keys()) if levels else 0
                    }

            print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(section_analysis)}")

            # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
            for doc_path, analysis in section_analysis.items():
                print(f"   –î–æ–∫—É–º–µ–Ω—Ç: {doc_path}")
                print(f"     –í—Å–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {analysis['total_headings']}")
                print(f"     –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {analysis['max_level']}")
                for level, headings in analysis['levels'].items():
                    print(f"     –£—Ä–æ–≤–µ–Ω—å {level}: {len(headings)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            print("\n6.2 –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤")
            relevant_sections = self.graph_builder.get_relevant_sections(
                test_query, top_k=3)
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: {len(relevant_sections)}")

            for section_id, score in relevant_sections:
                print(f"     {section_id}: {score:.3f}")

            self.test_results['graph_analyzer'] = True

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
            traceback.print_exc()
            self.test_results['graph_analyzer'] = False
            return False

        return True

    def test_performance_optimizations(self):
        """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 7: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("="*60)

        if not all([self.base_searcher, self.universal_searcher, self.reranker]):
            print("‚ùå –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False

        test_query = "—É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ä—É–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"
        print(
            f"7.1 –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{test_query[:50]}...'")

        try:
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            print("   –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
            start_time = time.time()
            base_results = self.base_searcher.search_raw(test_query, top_k=10)
            base_time = time.time() - start_time

            # –¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            print("   –¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
            start_time = time.time()
            universal_results = self.universal_searcher.search(test_query)
            universal_time = time.time() - start_time

            # –¢–µ—Å—Ç —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞
            print("   –¢–µ—Å—Ç —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞...")
            start_time = time.time()
            reranked = self.reranker.rerank(
                test_query, base_results, top_k_docs=5, max_chunks_per_doc=3)
            rerank_time = time.time() - start_time

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"   –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫: {base_time:.3f}—Å")
            print(f"   –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {universal_time:.3f}—Å")
            print(f"   –†–µ—Ä–∞–Ω–∫–µ—Ä: {rerank_time:.3f}—Å")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if base_time > 0:
                universal_overhead = (
                    universal_time - base_time) / base_time * 100
                print(
                    f"   –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {universal_overhead:.1f}%")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
            print("\n   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
            base_stats = self.base_searcher.get_cache_stats()
            universal_stats = self.universal_searcher.get_cache_stats()
            reranker_stats = self.reranker.get_cache_stats()

            print(f"     –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫: {base_stats}")
            print(f"     –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {universal_stats}")
            print(f"     –†–µ—Ä–∞–Ω–∫–µ—Ä: {reranker_stats}")

            self.test_results['performance_optimizations'] = True

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            traceback.print_exc()
            self.test_results['performance_optimizations'] = False
            return False

        return True

    def test_cache_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 8: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
        print("="*60)

        if not all([self.base_searcher, self.universal_searcher, self.reranker]):
            print("‚ùå –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False

        try:
            test_query = "—É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ä—É–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"

            # –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –∫—ç—à)
            print("8.1 –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫ (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—ç—à–∞)...")
            start_time = time.time()
            results1 = self.universal_searcher.search(test_query)
            time1 = time.time() - start_time

            # –í—Ç–æ—Ä–æ–π –ø–æ–∏—Å–∫ (–∏–∑ –∫—ç—à–∞)
            print("8.2 –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–∏–∑ –∫—ç—à–∞)...")
            start_time = time.time()
            results2 = self.universal_searcher.search(test_query)
            time2 = time.time() - start_time

            print(f"   –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫: {time1:.3f}—Å")
            print(f"   –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: {time2:.3f}—Å")
            print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time1/time2:.1f}x")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏
            print("\n8.3 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏:")
            base_stats = self.base_searcher.get_cache_stats()
            universal_stats = self.universal_searcher.get_cache_stats()
            reranker_stats = self.reranker.get_cache_stats()

            print(f"   –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫: {base_stats}")
            print(f"   –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {universal_stats}")
            print(f"   –†–µ—Ä–∞–Ω–∫–µ—Ä: {reranker_stats}")

            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            print("\n8.4 –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
            self.base_searcher.clear_cache()
            self.universal_searcher.clear_cache()
            self.reranker.clear_cache()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            print("8.5 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
            base_stats = self.base_searcher.get_cache_stats()
            universal_stats = self.universal_searcher.get_cache_stats()
            reranker_stats = self.reranker.get_cache_stats()

            print(f"   –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫: {base_stats}")
            print(f"   –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {universal_stats}")
            print(f"   –†–µ—Ä–∞–Ω–∫–µ—Ä: {reranker_stats}")

            self.test_results['cache_management'] = True

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º: {e}")
            traceback.print_exc()
            self.test_results['cache_management'] = False
            return False

        return True

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í RAG –°–ò–°–¢–ï–ú–´")
        print("="*60)

        tests = [
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", self.test_initialization),
            ("–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫", self.test_basic_search),
            ("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", self.test_universal_search),
            ("–†–µ—Ä–∞–Ω–∫–µ—Ä", self.test_reranker),
            ("–ö–æ–Ω—Ç–µ–∫—Å—Ç-–±–∏–ª–¥–µ—Ä", self.test_context_builder),
            ("–ì—Ä–∞—Ñ–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", self.test_graph_analyzer),
            ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", self.test_performance_optimizations),
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º", self.test_cache_management)
        ]

        passed = 0
        total = len(tests)

        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
                traceback.print_exc()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*60)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {passed/total*100:.1f}%")

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for key, value in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if value else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"  {key}: {status}")

        return passed == total


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã")
    print("="*60)

    try:
        tester = RAGSystemTester()
        success = tester.run_all_tests()

        if success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return 0
        else:
            print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            return 1

    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
