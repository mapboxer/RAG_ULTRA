#!/bin/bash

# RAG ULTRA v0.1 - –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bash quickstart.sh

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ RAG ULTRA v0.1 - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
echo "=========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è conda
if ! command -v conda &> /dev/null; then
    echo "‚ùå Conda –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Anaconda –∏–ª–∏ Miniconda"
    echo "   –°–∫–∞—á–∞—Ç—å: https://docs.conda.io/en/latest/miniconda.html"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
if conda env list | grep -q "corp-rag"; then
    echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ corp-rag —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    echo "   –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    eval "$(conda shell.bash hook)"
    conda activate corp-rag
else
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    conda env create -f environment.yml
    eval "$(conda shell.bash hook)"
    conda activate corp-rag
    echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
python -c "import torch, faiss, numpy; print('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')" || {
    echo "‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ."
    exit 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo ""
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
mkdir -p doc_ingest/models
mkdir -p doc_ingest/doc/{PDF,WORD,EXCEL,PPTX,TXT_MD}
mkdir -p doc_ingest/outputs/{dataset,index,media,graphs}
echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π
echo ""
echo "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π..."

EMBED_MODEL="doc_ingest/models/sbert_large_nlu_ru"
RERANK_MODEL="doc_ingest/models/reranker_ru"

if [ -d "$EMBED_MODEL" ] && [ -f "$EMBED_MODEL/model.safetensors" ]; then
    echo "‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–∞–π–¥–µ–Ω–∞"
else
    echo "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."
    python -c "
from huggingface_hub import snapshot_download
snapshot_download(
    repo_id='ai-forever/sbert_large_nlu_ru',
    repo_type='model',
    local_dir='$EMBED_MODEL',
    local_dir_use_symlinks=False
)
print('‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
"
fi

if [ -d "$RERANK_MODEL" ] && [ -f "$RERANK_MODEL/model.safetensors" ]; then
    echo "‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞"
else
    echo "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è..."
    python -c "
from sentence_transformers import CrossEncoder
ce = CrossEncoder('DiTy/cross-encoder-russian-msmarco')
ce.save_pretrained('$RERANK_MODEL')
print('‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
echo ""
echo "üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
DOC_COUNT=$(find doc_ingest/doc -type f \( -name "*.pdf" -o -name "*.docx" -o -name "*.xlsx" -o -name "*.pptx" -o -name "*.txt" \) 2>/dev/null | wc -l)

if [ "$DOC_COUNT" -eq 0 ]; then
    echo "‚ö†Ô∏è  –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ doc_ingest/doc/"
    echo "   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏:"
    echo "   - PDF —Ñ–∞–π–ª—ã –≤ doc_ingest/doc/PDF/"
    echo "   - Word —Ñ–∞–π–ª—ã –≤ doc_ingest/doc/WORD/"
    echo "   - Excel —Ñ–∞–π–ª—ã –≤ doc_ingest/doc/EXCEL/"
    echo "   - PowerPoint —Ñ–∞–π–ª—ã –≤ doc_ingest/doc/PPTX/"
    echo "   - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ doc_ingest/doc/TXT_MD/"
    echo ""
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 0
    fi
else
    echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: $DOC_COUNT"
fi

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
echo ""
echo "üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
echo "================================"

cd doc_ingest

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ -f "outputs/dataset/elements.jsonl" ]; then
    echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "–ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
    else
        echo "1Ô∏è‚É£  –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
        python 1.main_parse_doc.py
        
        echo "2Ô∏è‚É£  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–ª–µ–π..."
        python 2.main_build_doc_fields_index.py
        
        echo "3Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–∫—Å–∏–∫–æ–Ω–∞..."
        python 3.main_build_field_lexicon.py
        
        echo "4Ô∏è‚É£  –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è..."
        python 4.main_embed.py
    fi
else
    if [ "$DOC_COUNT" -gt 0 ]; then
        echo "1Ô∏è‚É£  –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
        python 1.main_parse_doc.py
        
        echo "2Ô∏è‚É£  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–ª–µ–π..."
        python 2.main_build_doc_fields_index.py
        
        echo "3Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–∫—Å–∏–∫–æ–Ω–∞..."
        python 3.main_build_field_lexicon.py
        
        echo "4Ô∏è‚É£  –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è..."
        python 4.main_embed.py
    else
        echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    fi
fi

cd ..

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
echo "‚ú® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "======================="
echo ""
echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo ""
echo "1. –î–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:"
echo "   conda activate corp-rag"
echo "   cd doc_ingest/service"
echo "   uvicorn search_api:app --reload --host 0.0.0.0 --port 8000"
echo ""
echo "2. API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:"
echo "   http://localhost:8000"
echo "   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
echo ""
echo "3. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:"
echo "   cd doc_ingest"
echo "   python test_rag_system.py"
echo ""
echo "üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md"
