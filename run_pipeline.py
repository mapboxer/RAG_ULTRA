#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ RAG —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import subprocess
from pathlib import Path


def run_command(cmd: str, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")

    try:
        result = subprocess.run(
            cmd, shell=True, check=True, capture_output=True, text=True)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        if result.stdout:
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stdout:
            print("STDOUT:")
            print(e.stdout)
        if e.stderr:
            print("STDERR:")
            print(e.stderr)
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê RAG –°–ò–°–¢–ï–ú–´")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ doc
    doc_path = Path("doc")
    if not doc_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ '{doc_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'doc' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        sys.exit(1)

    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    commands = [
        ("python doc_ingest/1.main_parse_doc.py", "1. –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
        ("python doc_ingest/2.main_build_doc_fields_index.py",
         "2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
        ("python doc_ingest/3.main_build_field_lexicon.py",
         "3. –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–∫—Å–∏–∫–æ–Ω–∞ –ø–æ–ª–µ–π"),
        ("python doc_ingest/4.main_embed.py", "4. –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤")
    ]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    for cmd, description in commands:
        if not run_command(cmd, description):
            print(f"\n‚ùå –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ: {description}")
            sys.exit(1)

    print(f"\n{'='*60}")
    print("üéâ –ü–ê–ô–ü–õ–ê–ô–ù –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    print(f"{'='*60}")
    print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("   - outputs/dataset/elements.jsonl - —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("   - outputs/index/faiss.index - FAISS –∏–Ω–¥–µ–∫—Å")
    print("   - outputs/index/meta.jsonl - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    print("   - outputs/graphs/corpus_graph.* - –≥—Ä–∞—Ñ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("\nüîç –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python -c \"from doc_ingest.retrieval.searcher import SemanticSearcher; s=SemanticSearcher(); print(s.search_raw('—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', top_k=3).results)\"")


if __name__ == "__main__":
    main()
